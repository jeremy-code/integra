name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

jobs:
  log:
    runs-on: ubuntu-latest
    steps:
      - uses: logflare/action@v1
        id: stats
        with:
          api_key: ${{ secrets.LOGFLARE_API_KEY }}
          source_id: ${{ secrets.LOGFLARE_SOURCE_ID }}
          message: "new release: ${{ github.event.release.html_url }}"
          metadata: |
            {
              "version": "${{ github.event.release.tag_name }}"
            }
  build:
    name: Build and Test
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
  deploy-server:
    name: Deploy server
    timeout-minutes: 15
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: jeremynguyencs/integra:latest
          context: .
          file: ./apps/api/Dockerfile
      - name: Image ID
        run: echo ${{ steps.docker_build.outputs.imageid }}
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy -i ${{ steps.docker_build.outputs.imageid }}
